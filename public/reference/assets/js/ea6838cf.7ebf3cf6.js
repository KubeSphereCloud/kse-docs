"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[9376],{92118:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>y,default:()=>k,frontMatter:()=>l,metadata:()=>g,toc:()=>u});var a=i(87462),s=(i(67294),i(3905)),r=i(26389),n=i(94891),o=i(75190),m=i(47507),c=i(24310),p=i(63303),d=(i(75035),i(85162));const l={id:"get-registry-entry",title:"Retrieve the blob from the registry",description:"Retrieve the blob from the registry",sidebar_label:"Retrieve the blob from the registry",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Advanced Operations"],operationId:"GetRegistryEntry",deprecated:!0,parameters:[{description:"query image, condition for filtering.",name:"image",in:"query",required:!0,schema:{type:"string",format:"image=%s"}},{description:"namespace which secret in.",name:"namespace",in:"query",schema:{type:"string",format:"namespace=%s"}},{description:"secret name",name:"secret",in:"query",schema:{type:"string",format:"secret=%s"}},{description:"whether verify cert if using https repo",name:"insecure",in:"query",schema:{type:"string",format:"insecure=%s"}}],responses:{200:{description:"ok",content:{"application/json":{schema:{properties:{imageBlob:{description:"Retrieve the blob from the registry identified. Reference: https://docs.docker.com/registry/spec/api/#blob",required:["rootfs omitempty"],properties:{architecture:{description:"The architecture field specifies the CPU architecture, for example amd64 or ppc64le.",type:"string"},config:{description:"The config field references a configuration object for a container.",properties:{ArgsEscaped:{description:"Command is already escaped (Windows only)",type:"boolean"},AttachStderr:{description:"Boolean value, attaches to stderr.",type:"boolean"},AttachStdin:{description:"Boolean value, attaches to stdin.",type:"boolean"},AttachStdout:{description:"Boolean value, attaches to stdout.",type:"boolean"},Cmd:{description:"Command to run specified as a string or an array of strings.",type:"array",items:{type:"string"}},Domainname:{description:"A string value containing the domain name to use for the container.",type:"string"},Entrypoint:{description:"The entry point set for the container as a string or an array of strings."},Env:{description:'A list of environment variables in the form of ["VAR=value", ...]',type:"array",items:{type:"string"}},ExposedPorts:{description:'An object mapping ports to an empty object in the form of: "ExposedPorts": { "<port>/<tcp|udp>: {}" }',type:"object"},Hostname:{description:"A string value containing the hostname to use for the container.",type:"string"},Image:{description:"A string specifying the image name to use for the container.",type:"string"},Labels:{description:"The map of labels to a container.",required:["maintainer"],properties:{maintainer:{type:"string"}}},OnBuild:{description:"ONBUILD metadata that were defined in the image's Dockerfile."},OpenStdin:{description:"Boolean value, opens stdin",type:"boolean"},StdinOnce:{description:"Boolean value, close stdin after the 1 attached client disconnects.",type:"boolean"},StopSignal:{description:"Signal to stop a container as a string or unsigned integer.",type:"string"},Tty:{description:"Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",type:"boolean"},User:{description:"A string value specifying the user inside the container.",type:"string"},Volumes:{description:"An object mapping mount point paths (strings) inside the container to empty objects."},WorkingDir:{description:"A string specifying the working directory for commands to run in.",type:"string"}}},container:{description:"Container id.",type:"string"},container_config:{description:"The config data of container.",properties:{ArgsEscaped:{description:"Command is already escaped (Windows only)",type:"boolean"},AttachStderr:{description:"Boolean value, attaches to stderr.",type:"boolean"},AttachStdin:{description:"Boolean value, attaches to stdin.",type:"boolean"},AttachStdout:{description:"Boolean value, attaches to stdout.",type:"boolean"},Cmd:{description:"Command to run specified as a string or an array of strings.",type:"array",items:{type:"string"}},Domainname:{description:"A string value containing the domain name to use for the container.",type:"string"},Entrypoint:{description:"The entry point set for the container as a string or an array of strings."},Env:{description:'A list of environment variables in the form of ["VAR=value", ...]',type:"array",items:{type:"string"}},ExposedPorts:{description:'An object mapping ports to an empty object in the form of: "ExposedPorts": { "<port>/<tcp|udp>: {}" }',type:"object"},Hostname:{description:"A string value containing the hostname to use for the container.",type:"string"},Image:{description:"A string specifying the image name to use for the container.",type:"string"},Labels:{description:"The map of labels to a container.",required:["maintainer"],properties:{maintainer:{type:"string"}}},OnBuild:{description:"ONBUILD metadata that were defined in the image's Dockerfile."},OpenStdin:{description:"Boolean value, opens stdin",type:"boolean"},StdinOnce:{description:"Boolean value, close stdin after the 1 attached client disconnects.",type:"boolean"},StopSignal:{description:"Signal to stop a container as a string or unsigned integer.",type:"string"},Tty:{description:"Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",type:"boolean"},User:{description:"A string value specifying the user inside the container.",type:"string"},Volumes:{description:"An object mapping mount point paths (strings) inside the container to empty objects."},WorkingDir:{description:"A string specifying the working directory for commands to run in.",type:"string"}}},created:{description:"Create time.",type:"string",format:"date-time"},docker_version:{description:"docker version.",type:"string"},history:{description:"The data of history update.",type:"array",items:{properties:{created:{description:"Created time.",type:"string",format:"date-time"},created_by:{description:"Created command.",type:"string"},empty_layer:{description:"Layer empty or not.",type:"boolean"}}}},os:{description:"Operating system.",type:"string"},"rootfs omitempty":{description:"Root filesystem.",properties:{diff_ids:{description:"Contain ids of layer list",type:"array",items:{type:"string"}},type:{description:'Root filesystem type, always "layers" ',type:"string"}}}}},imageManifest:{description:"Retrieve the manifest from the registry identified. Reference: https://docs.docker.com/registry/spec/api/#manifest",properties:{config:{description:"The config field references a configuration object for a container.",properties:{digest:{description:"The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",type:"string"},mediaType:{description:"The MIME type of the image.",type:"string"},size:{description:"The size in bytes of the image.",type:"integer",format:"int32"}}},layers:{description:"Fields of an item in the layers list.",type:"array",items:{properties:{digest:{description:"The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",type:"string"},mediaType:{description:"The MIME type of the layer.",type:"string"},size:{description:"The size in bytes of the layer.",type:"integer",format:"int32"}}}},mediaType:{description:"The MIME type of the manifest.",type:"string"},schemaVersion:{description:"This field specifies the image manifest schema version as an integer.",type:"integer",format:"int32"}}},imageTag:{description:"image tag.",type:"string"},message:{description:"Status message.",type:"string"},registry:{description:"registry domain.",type:"string"},status:{description:'Status is the status of the image search, such as "succeeded".',type:"string"}}}}}}},description:"Retrieve the blob from the registry",method:"get",path:"/kapis/resources.kubesphere.io/v1alpha2/registry/blob",security:[{BearerToken:[]}],securitySchemes:{BearerToken:{description:"Bearer Token Authentication",type:"apiKey",name:"Authorization",in:"header"}},info:{description:"KubeSphere Enterprise OpenAPI",title:"Introduction",contact:{name:"KubeSphere",url:"https://kubesphere.com.cn",email:"support@kubesphere.cloud"},version:"v4.0.0"},postman:{name:"Retrieve the blob from the registry",description:{type:"text/plain"},url:{path:["kapis","resources.kubesphere.io","v1alpha2","registry","blob"],host:["{{baseUrl}}"],query:[{disabled:!1,description:{content:"(Required) query image, condition for filtering.",type:"text/plain"},key:"image",value:""},{disabled:!1,description:{content:"namespace which secret in.",type:"text/plain"},key:"namespace",value:""},{disabled:!1,description:{content:"secret name",type:"text/plain"},key:"secret",value:""},{disabled:!1,description:{content:"whether verify cert if using https repo",type:"text/plain"},key:"insecure",value:""}],variable:[]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/v4.0.0/introduction",custom_edit_url:null},y=void 0,g={unversionedId:"api/v4.0.0/get-registry-entry",id:"api/v4.0.0/get-registry-entry",title:"Retrieve the blob from the registry",description:"Retrieve the blob from the registry",source:"@site/docs/api/v4.0.0/get-registry-entry.api.mdx",sourceDirName:"api/v4.0.0",slug:"/api/v4.0.0/get-registry-entry",permalink:"/reference/api/v4.0.0/get-registry-entry",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"get-registry-entry",title:"Retrieve the blob from the registry",description:"Retrieve the blob from the registry",sidebar_label:"Retrieve the blob from the registry",hide_title:!0,hide_table_of_contents:!0,api:{tags:["Advanced Operations"],operationId:"GetRegistryEntry",deprecated:!0,parameters:[{description:"query image, condition for filtering.",name:"image",in:"query",required:!0,schema:{type:"string",format:"image=%s"}},{description:"namespace which secret in.",name:"namespace",in:"query",schema:{type:"string",format:"namespace=%s"}},{description:"secret name",name:"secret",in:"query",schema:{type:"string",format:"secret=%s"}},{description:"whether verify cert if using https repo",name:"insecure",in:"query",schema:{type:"string",format:"insecure=%s"}}],responses:{200:{description:"ok",content:{"application/json":{schema:{properties:{imageBlob:{description:"Retrieve the blob from the registry identified. Reference: https://docs.docker.com/registry/spec/api/#blob",required:["rootfs omitempty"],properties:{architecture:{description:"The architecture field specifies the CPU architecture, for example amd64 or ppc64le.",type:"string"},config:{description:"The config field references a configuration object for a container.",properties:{ArgsEscaped:{description:"Command is already escaped (Windows only)",type:"boolean"},AttachStderr:{description:"Boolean value, attaches to stderr.",type:"boolean"},AttachStdin:{description:"Boolean value, attaches to stdin.",type:"boolean"},AttachStdout:{description:"Boolean value, attaches to stdout.",type:"boolean"},Cmd:{description:"Command to run specified as a string or an array of strings.",type:"array",items:{type:"string"}},Domainname:{description:"A string value containing the domain name to use for the container.",type:"string"},Entrypoint:{description:"The entry point set for the container as a string or an array of strings."},Env:{description:'A list of environment variables in the form of ["VAR=value", ...]',type:"array",items:{type:"string"}},ExposedPorts:{description:'An object mapping ports to an empty object in the form of: "ExposedPorts": { "<port>/<tcp|udp>: {}" }',type:"object"},Hostname:{description:"A string value containing the hostname to use for the container.",type:"string"},Image:{description:"A string specifying the image name to use for the container.",type:"string"},Labels:{description:"The map of labels to a container.",required:["maintainer"],properties:{maintainer:{type:"string"}}},OnBuild:{description:"ONBUILD metadata that were defined in the image's Dockerfile."},OpenStdin:{description:"Boolean value, opens stdin",type:"boolean"},StdinOnce:{description:"Boolean value, close stdin after the 1 attached client disconnects.",type:"boolean"},StopSignal:{description:"Signal to stop a container as a string or unsigned integer.",type:"string"},Tty:{description:"Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",type:"boolean"},User:{description:"A string value specifying the user inside the container.",type:"string"},Volumes:{description:"An object mapping mount point paths (strings) inside the container to empty objects."},WorkingDir:{description:"A string specifying the working directory for commands to run in.",type:"string"}}},container:{description:"Container id.",type:"string"},container_config:{description:"The config data of container.",properties:{ArgsEscaped:{description:"Command is already escaped (Windows only)",type:"boolean"},AttachStderr:{description:"Boolean value, attaches to stderr.",type:"boolean"},AttachStdin:{description:"Boolean value, attaches to stdin.",type:"boolean"},AttachStdout:{description:"Boolean value, attaches to stdout.",type:"boolean"},Cmd:{description:"Command to run specified as a string or an array of strings.",type:"array",items:{type:"string"}},Domainname:{description:"A string value containing the domain name to use for the container.",type:"string"},Entrypoint:{description:"The entry point set for the container as a string or an array of strings."},Env:{description:'A list of environment variables in the form of ["VAR=value", ...]',type:"array",items:{type:"string"}},ExposedPorts:{description:'An object mapping ports to an empty object in the form of: "ExposedPorts": { "<port>/<tcp|udp>: {}" }',type:"object"},Hostname:{description:"A string value containing the hostname to use for the container.",type:"string"},Image:{description:"A string specifying the image name to use for the container.",type:"string"},Labels:{description:"The map of labels to a container.",required:["maintainer"],properties:{maintainer:{type:"string"}}},OnBuild:{description:"ONBUILD metadata that were defined in the image's Dockerfile."},OpenStdin:{description:"Boolean value, opens stdin",type:"boolean"},StdinOnce:{description:"Boolean value, close stdin after the 1 attached client disconnects.",type:"boolean"},StopSignal:{description:"Signal to stop a container as a string or unsigned integer.",type:"string"},Tty:{description:"Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",type:"boolean"},User:{description:"A string value specifying the user inside the container.",type:"string"},Volumes:{description:"An object mapping mount point paths (strings) inside the container to empty objects."},WorkingDir:{description:"A string specifying the working directory for commands to run in.",type:"string"}}},created:{description:"Create time.",type:"string",format:"date-time"},docker_version:{description:"docker version.",type:"string"},history:{description:"The data of history update.",type:"array",items:{properties:{created:{description:"Created time.",type:"string",format:"date-time"},created_by:{description:"Created command.",type:"string"},empty_layer:{description:"Layer empty or not.",type:"boolean"}}}},os:{description:"Operating system.",type:"string"},"rootfs omitempty":{description:"Root filesystem.",properties:{diff_ids:{description:"Contain ids of layer list",type:"array",items:{type:"string"}},type:{description:'Root filesystem type, always "layers" ',type:"string"}}}}},imageManifest:{description:"Retrieve the manifest from the registry identified. Reference: https://docs.docker.com/registry/spec/api/#manifest",properties:{config:{description:"The config field references a configuration object for a container.",properties:{digest:{description:"The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",type:"string"},mediaType:{description:"The MIME type of the image.",type:"string"},size:{description:"The size in bytes of the image.",type:"integer",format:"int32"}}},layers:{description:"Fields of an item in the layers list.",type:"array",items:{properties:{digest:{description:"The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",type:"string"},mediaType:{description:"The MIME type of the layer.",type:"string"},size:{description:"The size in bytes of the layer.",type:"integer",format:"int32"}}}},mediaType:{description:"The MIME type of the manifest.",type:"string"},schemaVersion:{description:"This field specifies the image manifest schema version as an integer.",type:"integer",format:"int32"}}},imageTag:{description:"image tag.",type:"string"},message:{description:"Status message.",type:"string"},registry:{description:"registry domain.",type:"string"},status:{description:'Status is the status of the image search, such as "succeeded".',type:"string"}}}}}}},description:"Retrieve the blob from the registry",method:"get",path:"/kapis/resources.kubesphere.io/v1alpha2/registry/blob",security:[{BearerToken:[]}],securitySchemes:{BearerToken:{description:"Bearer Token Authentication",type:"apiKey",name:"Authorization",in:"header"}},info:{description:"KubeSphere Enterprise OpenAPI",title:"Introduction",contact:{name:"KubeSphere",url:"https://kubesphere.com.cn",email:"support@kubesphere.cloud"},version:"v4.0.0"},postman:{name:"Retrieve the blob from the registry",description:{type:"text/plain"},url:{path:["kapis","resources.kubesphere.io","v1alpha2","registry","blob"],host:["{{baseUrl}}"],query:[{disabled:!1,description:{content:"(Required) query image, condition for filtering.",type:"text/plain"},key:"image",value:""},{disabled:!1,description:{content:"namespace which secret in.",type:"text/plain"},key:"namespace",value:""},{disabled:!1,description:{content:"secret name",type:"text/plain"},key:"secret",value:""},{disabled:!1,description:{content:"whether verify cert if using https repo",type:"text/plain"},key:"insecure",value:""}],variable:[]},header:[{key:"Accept",value:"application/json"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/v4.0.0/introduction",custom_edit_url:null},sidebar:"kubesphere-v4.0.0",previous:{title:"Verify the git credential",permalink:"/reference/api/v4.0.0/verify-git-credential"},next:{title:"Verify registry credential",permalink:"/reference/api/v4.0.0/verify-registry-credential"}},h={},u=[{value:"Retrieve the blob from the registry",id:"retrieve-the-blob-from-the-registry",level:2}],f={toc:u},b="wrapper";function k(e){let{components:t,...i}=e;return(0,s.kt)(b,(0,a.Z)({},f,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"retrieve-the-blob-from-the-registry"},"Retrieve the blob from the registry"),(0,s.kt)("admonition",{title:"deprecated",type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"This endpoint has been deprecated and may be removed in future versions of the API.")),(0,s.kt)("p",null,"Retrieve the blob from the registry"),(0,s.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"Query Parameters")),(0,s.kt)("div",null,(0,s.kt)("ul",null,(0,s.kt)(o.Z,{className:"paramsItem",param:{description:"query image, condition for filtering.",name:"image",in:"query",required:!0,schema:{type:"string",format:"image=%s"}},mdxType:"ParamsItem"}),(0,s.kt)(o.Z,{className:"paramsItem",param:{description:"namespace which secret in.",name:"namespace",in:"query",schema:{type:"string",format:"namespace=%s"}},mdxType:"ParamsItem"}),(0,s.kt)(o.Z,{className:"paramsItem",param:{description:"secret name",name:"secret",in:"query",schema:{type:"string",format:"secret=%s"}},mdxType:"ParamsItem"}),(0,s.kt)(o.Z,{className:"paramsItem",param:{description:"whether verify cert if using https repo",name:"insecure",in:"query",schema:{type:"string",format:"insecure=%s"}},mdxType:"ParamsItem"})))),(0,s.kt)("div",null,(0,s.kt)(r.Z,{mdxType:"ApiTabs"},(0,s.kt)(d.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"ok")),(0,s.kt)("div",null,(0,s.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(d.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,s.kt)(p.Z,{mdxType:"SchemaTabs"},(0,s.kt)(d.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"imageBlob"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Retrieve the blob from the registry identified. Reference: ",(0,s.kt)("a",{parentName:"p",href:"https://docs.docker.com/registry/spec/api/#blob"},"https://docs.docker.com/registry/spec/api/#blob"))),(0,s.kt)(c.Z,{collapsible:!1,name:"architecture",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The architecture field specifies the CPU architecture, for example amd64 or ppc64le.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"config"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The config field references a configuration object for a container.")),(0,s.kt)(c.Z,{collapsible:!1,name:"ArgsEscaped",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Command is already escaped (Windows only)",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"AttachStderr",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, attaches to stderr.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"AttachStdin",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, attaches to stdin.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"AttachStdout",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, attaches to stdout.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Cmd",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{description:"Command to run specified as a string or an array of strings.",type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Domainname",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string value containing the domain name to use for the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Entrypoint",required:!1,schemaName:"",qualifierMessage:void 0,schema:{description:"The entry point set for the container as a string or an array of strings."},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Env",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{description:'A list of environment variables in the form of ["VAR=value", ...]',type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"ExposedPorts",required:!1,schemaName:"object",qualifierMessage:void 0,schema:{description:'An object mapping ports to an empty object in the form of: "ExposedPorts": { "<port>/<tcp|udp>: {}" }',type:"object"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Hostname",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string value containing the hostname to use for the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Image",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string specifying the image name to use for the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"Labels"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The map of labels to a container.")),(0,s.kt)(c.Z,{collapsible:!1,name:"maintainer",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(c.Z,{collapsible:!1,name:"OnBuild",required:!1,schemaName:"",qualifierMessage:void 0,schema:{description:"ONBUILD metadata that were defined in the image's Dockerfile."},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"OpenStdin",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, opens stdin",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"StdinOnce",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, close stdin after the 1 attached client disconnects.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"StopSignal",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"Signal to stop a container as a string or unsigned integer.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Tty",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"User",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string value specifying the user inside the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Volumes",required:!1,schemaName:"",qualifierMessage:void 0,schema:{description:"An object mapping mount point paths (strings) inside the container to empty objects."},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"WorkingDir",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string specifying the working directory for commands to run in.",type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(c.Z,{collapsible:!1,name:"container",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"Container id.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"container_config"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The config data of container.")),(0,s.kt)(c.Z,{collapsible:!1,name:"ArgsEscaped",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Command is already escaped (Windows only)",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"AttachStderr",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, attaches to stderr.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"AttachStdin",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, attaches to stdin.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"AttachStdout",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, attaches to stdout.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Cmd",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{description:"Command to run specified as a string or an array of strings.",type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Domainname",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string value containing the domain name to use for the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Entrypoint",required:!1,schemaName:"",qualifierMessage:void 0,schema:{description:"The entry point set for the container as a string or an array of strings."},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Env",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{description:'A list of environment variables in the form of ["VAR=value", ...]',type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"ExposedPorts",required:!1,schemaName:"object",qualifierMessage:void 0,schema:{description:'An object mapping ports to an empty object in the form of: "ExposedPorts": { "<port>/<tcp|udp>: {}" }',type:"object"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Hostname",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string value containing the hostname to use for the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Image",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string specifying the image name to use for the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"Labels"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The map of labels to a container.")),(0,s.kt)(c.Z,{collapsible:!1,name:"maintainer",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(c.Z,{collapsible:!1,name:"OnBuild",required:!1,schemaName:"",qualifierMessage:void 0,schema:{description:"ONBUILD metadata that were defined in the image's Dockerfile."},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"OpenStdin",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, opens stdin",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"StdinOnce",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, close stdin after the 1 attached client disconnects.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"StopSignal",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"Signal to stop a container as a string or unsigned integer.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Tty",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"User",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string value specifying the user inside the container.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"Volumes",required:!1,schemaName:"",qualifierMessage:void 0,schema:{description:"An object mapping mount point paths (strings) inside the container to empty objects."},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"WorkingDir",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"A string specifying the working directory for commands to run in.",type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(c.Z,{collapsible:!1,name:"created",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{description:"Create time.",type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"docker_version",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"docker version.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"history"),(0,s.kt)("span",{style:{opacity:"0.6"}}," undefined[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The data of history update.")),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)(c.Z,{collapsible:!1,name:"created",required:!1,schemaName:"date-time",qualifierMessage:void 0,schema:{description:"Created time.",type:"string",format:"date-time"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"created_by",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"Created command.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"empty_layer",required:!1,schemaName:"boolean",qualifierMessage:void 0,schema:{description:"Layer empty or not.",type:"boolean"},mdxType:"SchemaItem"}),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,s.kt)(c.Z,{collapsible:!1,name:"os",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"Operating system.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"rootfs omitempty"),(0,s.kt)("span",{style:{opacity:"0.6"}}," "),(0,s.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Root filesystem.")),(0,s.kt)(c.Z,{collapsible:!1,name:"diff_ids",required:!1,schemaName:"string[]",qualifierMessage:void 0,schema:{description:"Contain ids of layer list",type:"array",items:{type:"string"}},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"type",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:'Root filesystem type, always "layers" ',type:"string"},mdxType:"SchemaItem"}))))))),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"imageManifest"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Retrieve the manifest from the registry identified. Reference: ",(0,s.kt)("a",{parentName:"p",href:"https://docs.docker.com/registry/spec/api/#manifest"},"https://docs.docker.com/registry/spec/api/#manifest"))),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"config"),(0,s.kt)("span",{style:{opacity:"0.6"}}," ")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"The config field references a configuration object for a container.")),(0,s.kt)(c.Z,{collapsible:!1,name:"digest",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"mediaType",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The MIME type of the image.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"size",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{description:"The size in bytes of the image.",type:"integer",format:"int32"},mdxType:"SchemaItem"})))),(0,s.kt)(c.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"layers"),(0,s.kt)("span",{style:{opacity:"0.6"}}," undefined[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Fields of an item in the layers list.")),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem",paddingBottom:".5rem"}},"Array [")),(0,s.kt)(c.Z,{collapsible:!1,name:"digest",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"mediaType",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The MIME type of the layer.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"size",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{description:"The size in bytes of the layer.",type:"integer",format:"int32"},mdxType:"SchemaItem"}),(0,s.kt)("li",null,(0,s.kt)("div",{style:{fontSize:"var(--ifm-code-font-size)",opacity:"0.6",marginLeft:"-.5rem"}},"]"))))),(0,s.kt)(c.Z,{collapsible:!1,name:"mediaType",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"The MIME type of the manifest.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"schemaVersion",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{description:"This field specifies the image manifest schema version as an integer.",type:"integer",format:"int32"},mdxType:"SchemaItem"})))),(0,s.kt)(c.Z,{collapsible:!1,name:"imageTag",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"image tag.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"message",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"Status message.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"registry",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:"registry domain.",type:"string"},mdxType:"SchemaItem"}),(0,s.kt)(c.Z,{collapsible:!1,name:"status",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{description:'Status is the status of the image search, such as "succeeded".',type:"string"},mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(m.Z,{responseExample:'{\n  "imageBlob": {\n    "architecture": "string",\n    "config": {\n      "ArgsEscaped": true,\n      "AttachStderr": true,\n      "AttachStdin": true,\n      "AttachStdout": true,\n      "Cmd": [\n        "string"\n      ],\n      "Domainname": "string",\n      "Env": [\n        "string"\n      ],\n      "ExposedPorts": {},\n      "Hostname": "string",\n      "Image": "string",\n      "Labels": {\n        "maintainer": "string"\n      },\n      "OpenStdin": true,\n      "StdinOnce": true,\n      "StopSignal": "string",\n      "Tty": true,\n      "User": "string",\n      "WorkingDir": "string"\n    },\n    "container": "string",\n    "container_config": {\n      "ArgsEscaped": true,\n      "AttachStderr": true,\n      "AttachStdin": true,\n      "AttachStdout": true,\n      "Cmd": [\n        "string"\n      ],\n      "Domainname": "string",\n      "Env": [\n        "string"\n      ],\n      "ExposedPorts": {},\n      "Hostname": "string",\n      "Image": "string",\n      "Labels": {\n        "maintainer": "string"\n      },\n      "OpenStdin": true,\n      "StdinOnce": true,\n      "StopSignal": "string",\n      "Tty": true,\n      "User": "string",\n      "WorkingDir": "string"\n    },\n    "created": "2023-09-28T03:46:07.135Z",\n    "docker_version": "string",\n    "history": [\n      {\n        "created": "2023-09-28T03:46:07.135Z",\n        "created_by": "string",\n        "empty_layer": true\n      }\n    ],\n    "os": "string",\n    "rootfs omitempty": {\n      "diff_ids": [\n        "string"\n      ],\n      "type": "string"\n    }\n  },\n  "imageManifest": {\n    "config": {\n      "digest": "string",\n      "mediaType": "string",\n      "size": 0\n    },\n    "layers": [\n      {\n        "digest": "string",\n        "mediaType": "string",\n        "size": 0\n      }\n    ],\n    "mediaType": "string",\n    "schemaVersion": 0\n  },\n  "imageTag": "string",\n  "message": "string",\n  "registry": "string",\n  "status": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}k.isMDXComponent=!0}}]);