<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>流水线 on KubeSphere 企业版</title>
    <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/</link>
    <description>Recent content in 流水线 on KubeSphere 企业版</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>©2022 QingCloud, Inc. All rights reserved</copyright>
    <atom:link href="/v4.2.0/11-use-extensions/02-devops/03-pipelines/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用图形编辑面板创建流水线</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/01-create-a-pipeline-using-graphical-editing-panel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/01-create-a-pipeline-using-graphical-editing-panel/</guid>
      <description>DevOps 中的图形编辑面板包含用于 Jenkins 阶段 (Stage) 和步骤 (Step) 的所有必要操作。DevOps 支持直接在交互式面板上定义这些阶段和步骤，无需创建任何 Jenkinsfile。&#xA;本文档演示如何在 KubeSphere 企业版中使用图形编辑面板创建流水线。在整个过程中，DevOps 将根据编辑面板上的设置自动生成 Jenkinsfile，您无需手动创建 Jenkinsfile。待流水线成功运行，它会在您的开发环境中创建一个部署和一个服务，并将镜像推送至 Docker Hub。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已有一个 Docker Hub 账户。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;已创建一个用户（例如 project-admin），其在企业空间中具有项目创建权限。&#xA;已设置 CI 专用节点用于运行流水线。请参阅为缓存依赖项设置 CI 节点。&#xA;配置电子邮件服务器用于接收流水线通知（可选）。 请参阅为流水线设置电子邮件服务器。&#xA;配置 SonarQube 将代码分析纳入流水线中（可选）。 请参阅将 SonarQube 集成到流水线。&#xA;流水线概述 本示例流水线包括以下阶段。&#xA;说明 阶段 1：Checkout SCM：从 GitHub 仓库拉取源代码。&#xA;阶段 2：单元测试：待该测试通过后才会进行下一阶段。&#xA;阶段 3：代码分析（可选）：配置 SonarQube 用于静态代码分析。&#xA;阶段 4：构建并推送：构建镜像并附上标签 snapshot-$BUILD_NUMBER 推送至 Docker Hub，其中 $BUILD_NUMBER 是流水线运行记录列表中的记录的运行 ID。</description>
    </item>
    <item>
      <title>使用 Jenkinsfile 创建流水线</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/02-create-a-pipeline-using-jenkinsfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/02-create-a-pipeline-using-jenkinsfile/</guid>
      <description>Jenkinsfile 是一个文本文件，包含 Jenkins 流水线的定义，并被检入源代码控制仓库。Jenkinsfile 将整个工作流存储为代码，因此它是代码审查和流水线迭代过程的基础。有关更多信息，请参阅 Jenkins 官方文档。&#xA;本文档演示如何基于 GitHub 仓库中的 Jenkinsfile 创建流水线，并使用该流水线将示例应用程序分别部署到可从外部访问的开发环境和生产环境。&#xA;说明 DevOps 支持创建两种类型的流水线：一种是本文档中介绍的基于 SCM 中 Jenkinsfile 创建的流水线，另一种是通过图形编辑面板创建的流水线。&#xA;Jenkinsfile in SCM 需要源代码管理 (SCM) 中有内置 Jenkinsfile，换句话说，Jenkinsfile 必须是 SCM 的一部分。DevOps 系统会根据代码仓库的现有 Jenkinsfile 自动构建 CI/CD 流水线。通过定义工作流，例如 stage 和 step 可以满足特定的构建、测试和部署要求。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已有一个 Docker Hub 账户和一个 GitHub 账户。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;已创建一个用户（例如 project-admin），其在企业空间中具有项目创建权限。&#xA;已设置 CI 专用节点用于运行流水线。请参阅为缓存依赖项设置 CI 节点。&#xA;已安装和配置 SonarQube（可选）。请参阅将 SonarQube 集成到流水线。如果跳过这一部分，则没有下面的 SonarQube 分析阶段。</description>
    </item>
    <item>
      <title>使用流水线模板创建流水线</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/03-use-pipeline-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/03-use-pipeline-templates/</guid>
      <description>本文档演示如何在 KubeSphere 企业版上使用流水线模板创建流水线。&#xA;DevOps 提供图形编辑面板，支持通过交互式操作来定义 Jenkins 流水线的阶段和步骤。内置多个流水线模板，如 Node.js、Maven 以及 Golang，使用户能够快速创建对应模板的流水线。DevOps 还提供 CI 以及 CI &amp;amp; CD 流水线模板，但是这两个模板难以满足定制化需求，建议您采用其它内置模板或直接自定义流水线。&#xA;CI 流水线模板&#xA;CI 流水线模板包含两个阶段。clone code 阶段用于检出代码，build &amp;amp; push 阶段用于构建镜像并将镜像推送至 Docker Hub。先为代码仓库和 Docker Hub 仓库创建凭证，然后在相应的步骤中设置仓库的 URL 以及凭证。完成编辑后，流水线即可开始运行。&#xA;CI &amp;amp; CD 流水线模板&#xA;CI &amp;amp; CD 流水线模板包含六个阶段。有关每个阶段的更多信息，请参阅使用 Jenkinsfile 创建流水线。先为代码仓库、Docker Hub 仓库和集群的 kubeconfig 创建凭证，然后在相应的步骤中设置仓库的 URL 以及凭证。完成编辑后，流水线即可开始运行。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;操作步骤 下面以 Node.js 为例演示如何使用内置流水线模板。使用 Maven 以及 Golang 流水线模板的操作基本相同。</description>
    </item>
    <item>
      <title>使用 GitLab 创建多分支流水线</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/04-gitlab-multibranch-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/04-gitlab-multibranch-pipeline/</guid>
      <description>GitLab 是一款基于 web 的 Git 仓库管理工具，支持公开和私有仓库，并提供了全面的 DevOps 功能，包括源代码管理、代码审查、问题跟踪、持续集成等。通过 GitLab，团队能够在一个平台上高效协作，完成从代码编写到部署的整个软件开发过程。&#xA;KubeSphere 企业版支持在 DevOps 项目中使用 GitLab 创建多分支流水线。本文档演示如何使用 GitLab 创建多分支流水线。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;已有一个 GitLab 账户以及一个 Docker Hub 账户。&#xA;步骤 1：创建凭证 以 project-regular 用户登录 KubeSphere 企业版 Web 控制台并进入您的企业空间。&#xA;在左侧导航栏选择 DevOps &amp;gt; 凭证。&#xA;在页面左上角的下拉列表中选择一个 DevOps 项目。&#xA;创建以下凭证。有关如何创建凭证的更多信息，请参阅凭证。&#xA;说明 如果您的账户或密码中包含特殊字符，例如 @ 和 $，则可能会因为无法识别而在流水线运行时导致错误。在此情况下，您需要先在第三方网站（例如 urlencoder）上对账户或密码进行编码，然后将输出结果复制粘贴作为您的凭证信息。&#xA;凭证 ID 类型 用途 dockerhub-id&#xA;用户名和密码&#xA;Docker Hub</description>
    </item>
    <item>
      <title>设置流水线</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/05-pipeline-settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/05-pipeline-settings/</guid>
      <description>创建流水线时，可以通过各种设置来自定义流水线配置。&#xA;流水线创建后，进入流水线详情页，点击操作中的编辑信息和编辑设置，也可以编辑流水线的配置。&#xA;本文档详细介绍如何设置流水线。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;基本信息 创建流水线时，在基本信息页签，您可以自定义以下信息：&#xA;名称：流水线的名称，同一个 DevOps 项目内的流水线不能重名。&#xA;DevOps 项目：流水线所属的 DevOps 项目。&#xA;描述：描述流水线的附加信息，描述信息不超过 256 个字符。&#xA;流水线类别：普通流水线或多分支流水线。若选择多分支流水线，则需要选择一个代码仓库。&#xA;代码仓库（可选）：选择一个代码仓库作为流水线的代码源，可选择 GitHub、GitLab、Bitbucket、以及 Git 作为代码源。&#xA;GitHub&#xA;如果选择 GitHub，则必须指定用于访问 GitHub 的凭证。如果您已预先使用您的 GitHub 令牌创建了凭证，则从下拉菜单中选择已有凭证，或者点击创建凭证来创建新凭证。选择凭证后，点击确定，即可在右侧选择您的仓库。完成所有操作后，点击。&#xA;GitLab&#xA;如果选择 GitLab，则必须指定 GitLab 服务器地址、项目组/所有者和代码仓库。如果访问代码仓库需要凭证，则需要指定一个凭证。完成所有操作后，点击。&#xA;Bitbucket&#xA;如果选择 Bitbucket，则需要输入您的 Bitbucket 服务器地址。预先使用您的 Bitbucket 用户名和密码创建一个凭证，或者点击创建凭证来创建一个新凭证。输入信息后点击确定，即可在右侧选择您的仓库。完成所有操作后，点击。&#xA;Git&#xA;如果选择 Git，则需要指定仓库 URL。如果访问代码仓库需要凭证，则需要指定一个凭证，或者点击创建凭证来添加新凭证。完成所有操作后，点击。&#xA;高级设置 指定代码仓库 如果指定了一个代码仓库，则可以在高级设置页签上自定义以下配置：&#xA;分支设置&#xA;删除旧分支：自动删除旧分支。分支记录将一起被删除。分支记录包括控制台输出、已归档制品以及特定分支相关的其他元数据。更少的分支意味着您可以节省 Jenkins 正在使用的磁盘空间。DevOps 提供两个选项来确定何时丢弃旧分支：&#xA;分支保留天数（天）：超过保留期限的分支将被删除。&#xA;分支最大数量：分支数量超过最大数量时，删除最旧的分支。&#xA;说明 分支保留天数（天）和分支最大数量可以同时应用于分支。只要某个分支满足其中一个字段所设置的条件，则会删除该分支。例如，如果您将保留天数和最大分支数分别指定为 2 和 3，待某个分支的保留天数超过 2 或者分支保留数量超过 3，则会删除该分支。DevOps 默认用 7 和 5 预填充这两个字段。</description>
    </item>
    <item>
      <title>使用 Webhook 触发流水线</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/06-pipeline-webhook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/06-pipeline-webhook/</guid>
      <description>若要通过远程代码仓库创建基于 Jenkinsfile 的流水线，可以在远程仓库中配置 webhook，以便在远程仓库变更时，自动触发流水线。&#xA;本文档演示如何在 GitHub 仓库中用 webhook 触发流水线。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;已通过远程代码仓库创建一个基于 Jenkinsfile 的流水线。有关更多信息，请参阅使用 Jenkinsfile 创建流水线。&#xA;配置 Webhook 获取 webhook URL 以 project-regular 用户登录 KubeSphere 企业版 Web 控制台并进入您的企业空间。&#xA;在左侧导航栏选择 DevOps &amp;gt; 流水线。&#xA;在页面左上角的下拉列表中选择一个 DevOps 项目。&#xA;在流水线页面，点击一个流水线（例如 jenkins-in-scm）以查看其详情页面。&#xA;点击操作，在下拉菜单中选择编辑设置。&#xA;在弹出的会话框中，滚动至 Webhook 以获得 Webhook push URL。&#xA;在 GitHub 仓库中设置 webhook 登录您的 GitHub，并进入 devops-maven-sample 仓库。&#xA;点击 Settings &amp;gt; Webhooks，然后点击 Add webhook。</description>
    </item>
    <item>
      <title>登录 Jenkins 仪表板</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/07-access-jenkins-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/07-access-jenkins-console/</guid>
      <description>安装 DevOps 时，默认情况下也会安装 Jenkins 仪表板。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;操作步骤 查看 jenkins 仪表盘对应的服务，然后参阅如何访问服务，访问 Jenkins 仪表板。&#xA;kubectl -n kubesphere-devops-system get svc devops-jenkins 获取 jenkins 管理员的用户名和密码。&#xA;kubectl -n kubesphere-devops-system get secret devops-jenkins -o yaml 输出示例：&#xA;data: jenkins-admin-password: aXMxZno1Z3lnQWFTaGRIU2EwUDZkbg== jenkins-admin-token: MTE5NTQ4NDY3MTE4MDQ4ODAzMDI1MTc3MDk1OTUwNTM2MQ== jenkins-admin-user: YWRtaW4= 将 jenkins-admin-user 和 jenkins-admin-password 对应的内容 base64 解码后，即得到 jenkins 管理员的用户名和密码。&#xA;使用获取的用户名和密码，登录 Jenkins 仪表板。&#xA;说明 若想以 LDAP 或 OpenId Connect 的方式登录 jenkins 仪表板，请参阅扩展中心 DevOps 扩展组件的详情页说明。</description>
    </item>
    <item>
      <title>设置 Jenkins 系统</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/08-jenkins-setting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/08-jenkins-setting/</guid>
      <description>DevOps 系统提供基于 Jenkins 的容器化 CI/CD 功能。Jenkins 作为 CI/CD 工作流的事实标准，具备强大而灵活的特性。然而，许多插件要求用户在使用 Jenkins 之前必须进行系统级配置。&#xA;为了提供可调度的 Jenkins 环境，KubeSphere 企业版采用了 Configuration as Code 的方式进行 Jenkins 系统设置。用户需要登录 Jenkins 仪表板，修改配置后再重新加载。&#xA;本文档演示如何设置 Jenkins 并重新加载配置。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;Jenkins Configuration as Code KubeSphere 企业版默认安装 Jenkins Configuration as Code 插件，支持通过 YAML 文件定义 Jenkins 的期望状态，便于再现 Jenkins 的配置（包括插件配置）。请参阅该目录查看具体的 Jenkins 配置和示例 YAML 文件。&#xA;修改 ConfigMap 建议通过 Configuration as Code (CasC) 在 KubeSphere 企业版中配置 Jenkins。将内置 Jenkins CasC 文件存储为 ConfigMap。&#xA;以 admin 用户登录 KubeSphere 企业版 Web 控制台。</description>
    </item>
    <item>
      <title>在流水线中使用 Jenkins 共享库</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/10-jenkins-shared-library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/10-jenkins-shared-library/</guid>
      <description>对于包含相同阶段或步骤的 Jenkins 流水线，可以在 Jenkinsfile 中使用 Jenkins 共享库避免流水线代码重复。&#xA;本文档演示如何在 DevOps 流水线中使用 Jenkins 共享库。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;已创建一个企业空间、一个 DevOps 项目和一个用户（例如 project-regular），并已邀请该用户至 DevOps 项目且授予 operator 角色。请参阅邀请用户加入 DevOps 项目。&#xA;已有一个可用 Jenkins 共享库。本教程以 GitHub 仓库中的 Jenkins 共享库为例。&#xA;步骤 1：在 Jenkins 仪表板配置共享库 登录 Jenkins 仪表板并点击左侧导航栏中的系统管理。&#xA;向下滚动并点击系统配置。&#xA;向下滚动到 Global Pipeline Libraries，然后点击新增。&#xA;配置字段如下所示。&#xA;Name： 为共享库设置名称（例如，demo-shared-library），以便在 Jenkinsfile 中引用此名称来导入共享库。&#xA;Default version： 设置共享库所在仓库的一个分支名称，将其作为导入共享库的默认分支。本教程将使用 master。&#xA;在 Retrieval method 下，选择 Modern SCM。&#xA;在 Source Code Management 下，选择 Git，并为项目仓库输入示例仓库的 URL 。如果您使用自己的仓库且访问此仓库需要凭证，还需要配置凭证。</description>
    </item>
    <item>
      <title>为流水线设置电子邮件服务器</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/11-jenkins-email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/11-jenkins-email/</guid>
      <description>内置 Jenkins 无法与 KubeSphere 企业版的通知系统共享相同的电子邮件配置。因此，您需要单独为 DevOps 流水线配置电子邮件服务器。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;您需要在 KubeSphere 企业版平台具有集群管理权限。&#xA;操作步骤 以具有集群管理权限的账户登录 KubeSphere 企业版 Web 控制台。&#xA;点击集群管理，进入一个集群。&#xA;在左侧导航栏中选择应用负载下的工作负载，从下拉列表中选择 kubesphere-devops-system 项目。点击 devops-jenkins 右侧的，并选择编辑 YAML。&#xA;在 YAML 文件中编辑如下所示的字段。完成修改后，点击确定。&#xA;警告 修改电子邮件服务器配置后，devops-jenkins 部署 (Deployment) 会重新启动。因此，DevOps 系统将在几分钟内不可用，请在适当的时候修改这些配置。&#xA;环境变量名称 描述信息 EMAIL_SMTP_HOST&#xA;SMTP 服务器地址&#xA;EMAIL_SMTP_PORT&#xA;SMTP 服务器端口（如：25）&#xA;EMAIL_FROM_ADDR&#xA;电子邮件发件人地址&#xA;EMAIL_FROM_NAME&#xA;电子邮件发件人姓名&#xA;EMAIL_FROM_PASS&#xA;电子邮件发件人密码&#xA;EMAIL_USE_SSL&#xA;是否启用 SSL 配置</description>
    </item>
    <item>
      <title>选择 Jenkins Agent</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/12-choose-jenkins-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/12-choose-jenkins-agent/</guid>
      <description>agent 部分指定整个流水线或特定阶段 (Stage) 将在 Jenkins 环境中执行的位置，具体取决于该 agent 部分的放置位置。该部分必须在 pipeline 块的顶层进行定义，但是阶段级别的使用是可选的。有关更多信息，请参阅 Jenkins 官方文档。&#xA;内置 podTemplate podTemplate 是一种 Pod 模板，用于创建 Agent。您可以定义在 Kubernetes 插件中使用的 podTemplate。&#xA;在流水线运行期间，每个 Jenkins Agent Pod 必须具有一个名为 jnlp 的容器，以便实现 Jenkins Controller 与 Jenkins Agent 之间的通信。此外，您可以在 podTemplate 中添加容器，以满足个性化需求。可选择使用自定义的 Pod YAML 来灵活控制运行时环境（Runtime），并通过 container 命令来切换容器。以下是相关示例。&#xA;pipeline { agent { kubernetes { //cloud &amp;#39;kubernetes&amp;#39; label &amp;#39;mypod&amp;#39; yaml &amp;#34;&amp;#34;&amp;#34; apiVersion: v1 kind: Pod spec: containers: - name: maven image: maven:3.3.9-jdk-8-alpine command: [&amp;#39;cat&amp;#39;] tty: true &amp;#34;&amp;#34;&amp;#34; } } stages { stage(&amp;#39;Run maven&amp;#39;) { steps { container(&amp;#39;maven&amp;#39;) { sh &amp;#39;mvn -version&amp;#39; } } } } } 在当前版本中，KubeSphere 企业版内置了一类 podTemplate：base，并且在 Pod 中提供隔离的 Docker 环境。</description>
    </item>
    <item>
      <title>自定义 Jenkins Agent</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/13-customize-jenkins-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/13-customize-jenkins-agent/</guid>
      <description>若要使用运行特定环境（例如 JDK 11）的 Jenkins Agent，可以在 KubeSphere 企业版上自定义 Jenkins Agent。&#xA;本文档描述如何在 KubeSphere 企业版上自定义 Jenkins Agent。&#xA;前提条件 KubeSphere 企业版平台需要安装并启用 DevOps 扩展组件。&#xA;自定义 Jenkins Agent 以 admin 用户登录 KubeSphere 企业版 Web 控制台。&#xA;点击集群管理，进入一个集群。&#xA;在左侧导航栏选择配置下的配置字典。&#xA;在配置字典页面的搜索框中输入 jenkins-casc-config 并按回车键。&#xA;点击 jenkins-casc-config 进入其详情页面，点击操作，选择编辑 YAML。&#xA;在弹出的对话框中，搜寻至 data:jenkins_user.yaml:jenkins:clouds:kubernetes:templates 下方并输入以下代码，点击确定。&#xA;- name: &amp;#34;maven-jdk11&amp;#34; # 自定义 Jenkins Agent 的名称。 label: &amp;#34;maven jdk11&amp;#34; # 自定义 Jenkins Agent 的标签。若要指定多个标签，请用空格来分隔标签。 inheritFrom: &amp;#34;maven&amp;#34; # 自定义 Jenkins Agent 所继承的现有容器组模板的名称。 containers: - name: &amp;#34;maven&amp;#34; # 自定义 Jenkins Agent 所继承的现有容器组模板中指定的容器名称。 image: &amp;#34;kubespheredev/builder-maven:v3.</description>
    </item>
    <item>
      <title>为依赖项缓存设置 CI 节点</title>
      <link>/v4.2.0/11-use-extensions/02-devops/03-pipelines/15-set-ci-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/v4.2.0/11-use-extensions/02-devops/03-pipelines/15-set-ci-node/</guid>
      <description>构建应用程序通常需要拉取不同的依赖项。拉取过程中可能会遇到某些问题，例如拉取时间长、网络不稳定，进而导致构建失败。为了提供更可靠和稳定的环境，可以配置节点或节点组，专门用于持续集成 (CI)，并通过使用缓存来加快构建过程。&#xA;本文档演示如何设置 CI 节点，以便 KubeSphere 企业版将流水线的任务调度到这些节点。&#xA;前提条件 您需要在 KubeSphere 企业版平台具有集群管理权限。&#xA;标记 CI 节点 以具有集群管理权限的账户登录 KubeSphere 企业版 Web 控制台。&#xA;点击集群管理，进入一个集群。&#xA;在左侧导航栏中选择节点下的集群节点，查看当前集群中的现有节点。&#xA;从列表中选择一个节点用来运行 CI 任务。点击节点名称转到其详情页面，点击操作 &amp;gt; 编辑标签。&#xA;在弹出的对话框中，在键为 node-role.kubernetes.io/worker 的后面，输入 ci 作为此标签的值，点击确定。&#xA;给 CI 节点添加污点 流水线一般会根据节点亲和性来确定是否调度任务到某一节点。如果要将节点专用于 CI 任务，即不允许将其他工作负载调度到该节点，可以在该节点上添加污点。&#xA;点击操作 &amp;gt; 编辑污点。&#xA;点击添加，输入键 node.kubernetes.io/ci 而不指定值。根据需要选择阻止调度、尽可能阻止调度或阻止调度并驱逐现有容器组 。&#xA;点击确定。KubeSphere 企业版将根据您设置的污点调度任务。</description>
    </item>
  </channel>
</rss>
