<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OAuth2-Proxy on KubeSphere 企业版</title>
    <link>/v4.2.0/11-use-extensions/21-oauth2-proxy/</link>
    <description>Recent content in OAuth2-Proxy on KubeSphere 企业版</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>©2022 QingCloud, Inc. All rights reserved</copyright><atom:link href="/v4.2.0/11-use-extensions/21-oauth2-proxy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>配置并访问服务</title>
      <link>/v4.2.0/11-use-extensions/21-oauth2-proxy/01-config-oauth2-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/v4.2.0/11-use-extensions/21-oauth2-proxy/01-config-oauth2-proxy/</guid>
      <description>OAuth2-Proxy 支持多种 OAuth Providers。本节介绍如何配置该扩展组件将 KubeSphere 作为 OAuth Provider，以便通过 KubeSphere 认证登录后，直接访问各种服务。
配置 OAuth2-Proxy OAuth2-Proxy 扩展组件提供 NodePort 和 Ingress 两种方式，为应用提供基于 KubeSphere 用户的统一身份认证。不同方式下，配置 OAuth2-Proxy 的方法不同。
NodePort 方式 通过将扩展组件中的 OpenResty NodePort 对外暴露，为代理应用提供统一访问入口。
在扩展组件配置中，修改 global.host，并确认 openresty.service.nodePort，完成扩展组件的部署。
global: # OAuth2-Proxy service external access address # For example, using NodePort, the address is http://172.31.19.4:32080, # using Ingress, the host is http://172.31.19.4.nip.io:80 host: &amp;#34;http://&amp;lt;oauth2-proxy-service-external-access-address&amp;gt;&amp;#34; # Kubesphere portal address. For example, http://172.31.19.4:30880 # No need to set this explicitly, KubeSphere&amp;#39;s portal address will be auto-injected.</description>
    </item>
    
  </channel>
</rss>
